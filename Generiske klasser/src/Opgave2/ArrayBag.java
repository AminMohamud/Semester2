package Opgave2;public class ArrayBag<T> implements Bag<T> {    private T[] elements = (T[]) new Object[10];    private int currentSize;    public int getCurrentSize() {        return currentSize;    }    @Override    public boolean isFull() {        return currentSize == elements.length;    }    @Override    public boolean isEmpty() {        return currentSize == 0;    }    @Override    public boolean add(T newEntry) {        if (!isFull()) {            elements[currentSize] = newEntry;            currentSize++;            return true;        }        return false;    }    @Override    public T remove() {        // Check if the bag is not empty and the last element != null        if (!isEmpty()) {            T removedElement = elements[currentSize - 1];            elements[currentSize - 1] = null;            currentSize--;            return removedElement;        }        return null;    }    @Override    public boolean remove(T anEntry) {        if (!isEmpty()) {            for (int i = 0; i < getCurrentSize(); i++) {                if (anEntry.equals(elements[i])) {                    elements[i] = null;                    currentSize--;                }            }            return true;        }        return false;    }    @Override    public void clear() {        if (!isEmpty()) {            for (int i = 0; i < elements.length; i++) {                elements[i] = null;            }            currentSize = 0;        }    }    @Override    public int getFrequencyOf(T anEntry) {        int counter = 0;        for (int i = 0; i < getCurrentSize(); i++) {            if (elements[i].equals(anEntry)) {                counter++;            }        }        return counter;    }    @Override    public boolean contains(T anEntry) {        for (int i = 0; i < getCurrentSize(); i++) {            if (anEntry.equals(elements[i])) {                return true;            }        }        return false;    }    @Override    public T[] toArray() {        T[] newElements = (T[]) new Object[currentSize];        System.arraycopy(elements,0,newElements,0,currentSize);        return elements;    }}